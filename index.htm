<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>THE HAMMER</title>
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <style>
      html {
        font-family: sans-serif;
      }
      body {
        padding: 20px;
        background-color: rgb(57, 57, 57);
      }
      hr {
        padding: 0;
      }
      details,
      main,
      summary {
        display: block;
      }
      a {
        background-color: transparent;
      }
      a:active,
      a:hover {
        outline: 0;
      }
      b {
        font-weight: 700;
      }
      h1 {
        font-size: 44px;
        margin: 10px 0 5px 0;
      }
      h2 {
        font-size: 24px;
      }
      input:-webkit-autofill,
      input:-webkit-autofill:hover,
      input:-webkit-autofill:focus,
      input:-webkit-autofill:active {
        -webkit-box-shadow: 0 0 0 30px #fff inset !important;
      }
      input[type='checkbox'] {
        box-sizing: border-box;
        padding: 0;
      }
      input[type='text'],
      input[type='number'],
      input[type='password'],
      select {
        height: 40px;
        width: 90%;
        padding: 0 0 0 20px;
        border: 1px solid #ccc;
        border-radius: 6px;
        font-size: 16px;
      }
      input[type='file'] {
        display: none;
      }
      input::placeholder {
        color: #5e5e5e;
      }
      input:hover {
        border-color: rgba(0, 0, 0, 0.8);
        box-shadow: 0 1px 4px 0 rgba(220, 220, 229, 0.9);
      }
      input:focus,
      select:focus {
        border-color: #3898ec;
        outline: 0;
      }
      input[type='number']:hover::-webkit-inner-spin-button {
        -webkit-appearance: none;
        -moz-appearance: textfield;
      }
      footer {
        text-align: center;
        font-size: 12px;
        margin: 40px;
      }
      button,
      .btn {
        display: inline-flex;
        padding: 10px 15px;
        background-color: #26ff00;
        color: #0d4869;
        border: 3px solid white;
        cursor: pointer;
        min-width: 40%;
        border-radius: 5px;
        justify-content: center;
      }
      button:hover,
      .btn:hover {
        filter: brightness(85%);
      }
      ul {
        display: table;
        text-align: left;
        margin: 0 auto 10px auto;
      }
      hr {
        width: 100%;
        order: 997;
      }
      select {
        width: 92.5%;
      }

      .input-label {
        align-self: self-start;
        color: #015293;
        position: relative;
        left: 5%;
        bottom: -5px;
        border-radius: 6px;
        border: 1px solid #ccc;
        background-color: #fff;
        font-size: 13.5px;
        padding: 2px 10px 0 10px;
      }
      .input-label:hover {
        border-color: rgba(0, 0, 0, 0.8);
      }
      .esp-info {
        text-align: center;
        margin-bottom: 12px;
      }
      .row-wrapper {
        display: flex;
        flex-wrap: nowrap;
        align-items: baseline;
        gap: 20px;
      }
      .loading {
        color: #ffffff9e;
        text-align: center;
      }
      .loader {
        position: relative;
        height: auto;
        overflow: hidden;
      }
      .spinH {
        top: 50%;
        position: absolute;
        height: 8px;
        width: 8px;
        background: #ffffff2b;
        border-radius: 100%;
      }
      .spin-1H {
        animation: spinnerH 3s infinite linear;
      }
      .spin-2H {
        animation: spinnerH 3s 0.1s infinite linear;
      }
      .spin-3H {
        animation: spinnerH 3s 0.2s infinite linear;
      }
      .spin-4H {
        animation: spinnerH 3s 0.3s infinite linear;
      }
      @keyframes spinnerH {
        0% {
          transform: translateX(0);
        }
        20% {
          transform: translate(200px);
        }
        70% {
          transform: translateX(505px);
        }
        100% {
          transform: translateX(800px);
        }
      }

      .progress-wrap {
        text-align: center;
        position: relative;
        width: 60%;
        height: 25px;
        margin: 20px auto;
        background: #9e9e9e7d;
        font-size: 20px;
        transition: all 0.4s ease;
      }
      .progress-wrap:not(.active) {
        cursor: pointer;
        background: #9e9e9e00;
      }
      .progress-wrap .progress {
        width: 0;
        z-index: 5;
        background: #9e9e9ea1;
        opacity: 0;
        transition: all 0.3s ease;
      }
      .progress-wrap.active .progress {
        opacity: 1;
        animation: progress-anim 10s ease 0s;
      }
      .progress-wrap[data-progress-style='fill-back'] .progress {
        position: absolute;
        left: 0;
        top: 0;
        right: 0;
        bottom: 0;
      }
      .d-modal {
        width: 70%;
        border-radius: 10px;
        border-style: solid;
        border-width: 1px;
        border-color: #3333336e;
        background-color: hsl(199.53deg 18.3% 46.08% / 90%);
        box-shadow: rgba(0, 0, 0, 0.24) 0 3px 8px;
        left: 50%;
        position: absolute;
        top: 50%;
        transform: translate(-50%, -50%);
        flex-direction: column;
      }
      .d-modal-title {
        color: #111827;
        padding: 1.5em;
        position: relative;
        width: calc(100% - 4.5em);
      }
      .d-modal-content {
        border-top: 1px solid #e0e0e0;
        padding: 1.5em;
        overflow: auto;
      }
      /* ✅ Force Flexbox for the navigation bar */
      .topnav {
        display: flex !important;
        flex-direction: row !important;
        justify-content: flex-start !important;
        align-items: center !important;
        background-color: #333;
        overflow: show;
        width: fit-content;
        float: right;
        border-radius: 5px;
        align-self: flex-end;
        bottom: 5px;
        right: 20px;
        margin-right: 20px;
      }

      /* ✅ Force the Settings button to be FIRST */
      #settings-link {
        order: 0 !important; /* Put it before all others */
      }

      /* ✅ Ensure other buttons follow */
      #nav-link {
        order: 1 !important;
      }

      #upd-link {
        order: 2 !important;
      }

      #hum-btn {
        order: 3 !important;
        position: absolute;
        top: 155px;
        right: 9px;
        z-index: 1001;
        padding: 6px;
        background-color: #333;
        border-radius: 5px;
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        width: 19px;
        height: 21.5px;
      }

      .topnav a {
        float: left;
        display: block;
        color: #f2f2f2;
        text-align: center;
        padding: 5px 10px;
        text-decoration: none;
      }
      .topnav a:hover {
        filter: brightness(55%);
        cursor: pointer;
      }
      .topnav a.active {
        background-color: #00ff00;
        color: #0d4869;
        border-radius: 5px;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        width: 130px;
      }
      .topnav .icon {
        display: none;
      }
      .logo {
        width: 100%;
      }
      .lbl-wifi {
        align-self: flex-end;
      }
      .table {
        width: 90%;
        margin: auto;
        border-collapse: collapse;
        border-spacing: 0;
      }
      .svg {
        display: flex;
        width: 20px;
        margin-right: 10px;
      }
      .svg-e {
        margin-top: 5px;
      }

      .output {
        color: white;
      }
      .form {
        padding: 10px 0;
        width: 85%;
        text-align: center;
      }

      .ctn:before,
      .ctn:after {
        content: ' ';
        display: table;
        grid-column-start: 1;
        grid-row-start: 1;
        grid-column-end: 2;
        grid-row-end: 2;
      }
      .ctn:after {
        clear: both;
      }
      .ctn {
        background-color: #1c84d9;
        background-image: url("/img/HammerLogo50pTransparency.png");
        background-repeat: no-repeat;
        color: #ffffff;
        padding: 10px 20px;
        border: 3px solid #FFFFFF;
        border-radius: 10px;
        height: 100%;
        min-width: 340px;
        box-shadow: 0px 0px 15px 3px #000;
      }

      .ctncustom {
        display: flex;
        flex-direction: column;
        position: relative;
        overflow: visible;
        min-width: 320px;
        margin: 0 auto 10px auto;
        padding: 10px 20px;
        border-radius: 10px;
        border: 3px solid white;
        background-color: #1c84d9;
        box-shadow: rgba(0, 0, 0, 0.24) 0 3px 8px;
        font-size: 1.1rem;
        height: 180px;
      }

      .btn-bar {
        display: flex;
        padding: 20px;
        justify-content: center;
        flex-wrap: wrap;
        grid-column-gap: 30px;
        grid-row-gap: 20px;
        order: 998;
      }
      .tf-wrapper {
        display: flex;
        margin-bottom: 10px;
        flex-direction: column;
        align-items: center;
      }

      .title {
        display: flex;
      }
      .heading {
        width: 100%;
        text-align: right;
        margin-right: 0;
        color: #fff;
        white-space: nowrap;
      }
      .heading-2 {
        font-weight: 400;
        text-align: center;
        margin: 10px auto;
        color: #0d4869;
      }
      .toggle {
        cursor: pointer;
        display: block;
        padding: 4px;
        width: fit-content;
        margin: 0 0 18px -10px;
      }
      .toggle-label {
        margin: 0 20px 0 20px;
        position: relative;
        top: 2px;
      }
      .toggle-switch {
        display: inline-block;
        background: #ccc;
        border-radius: 16px;
        width: 58px;
        height: 32px;
        position: relative;
        vertical-align: middle;
        transition: background 0.25s;
      }
      .toggle-switch:before,
      .toggle-switch:after {
        content: '';
      }
      .toggle-switch:before {
        display: block;
        background: #034c89;
        border-radius: 50%;
        width: 24px;
        height: 24px;
        position: absolute;
        top: 4px;
        left: 4px;
        transition: left 0.25s;
      }
      .toggle:hover .toggle-switch:before {
        background: #034c89;
      }
      .t-check:checked + .toggle-switch {
        background: #00ff00;
      }
      .t-check:checked + .toggle-switch:before {
        left: 35px;
      }
      .t-check {
        position: absolute;
        visibility: hidden;
      }

      .pswd {
        display: flex;
        flex-direction: row;
        align-items: center;
        width: 100%;
        justify-content: center;
      }
      .show-hide-wrap {
        position: absolute;
        right: 8%;
        cursor: pointer;
        margin-right: 16px;
        margin-bottom: 5px;
      }

      .firmware {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      .fw-upload {
        display: inline-block;
        padding: 12px 20px;
        cursor: pointer;
        border-radius: 5px;
        margin-bottom: 20px;
        background: rgb(204, 165, 131);
        color: #fff;
        border: 3px solid white
      }
      .fw-upload:hover {
        filter: brightness(85%);
      }
      .btn,
      .submit {
        min-width: 25%;
      }

      #about {
        color: lightgray;
      }
      #esp-ip {
        display: inline-block;
        margin-bottom: 5px;
      }

      @media screen and (max-width: 991px) {
        .wifi-connect {
          padding-right: 20px;
          padding-left: 20px;
        }
      }
      @media screen and (max-width: 767px) {
        .wifi-connect {
          padding-right: 10px;
          padding-left: 10px;
        }
        select {
          width: 93.5%;
        }
      }
      @media screen and (max-width: 608px) {
        h1 {
          font-size: 28px;
        }
        .btn-bar {
          margin-top: 10px;
          flex-direction: column;
        }
        .topnav {
          display: block !important; /* Use block for mobile */
          border-top-right-radius: 0;
        }
        .topnav a {
          padding: 5px 10px 8px;
        }
        .topnav a:not(.active) {
          display: none;
        }
        .topnav a.icon {
          float: right;
          display: block;
        }
        .topnav.responsive .icon {
          position: absolute;
          right: 0;
          top: 0;
        }
        .topnav.responsive a {
          float: none;
          display: block;
          text-align: left;
        }
        .hide-tiny {
          display: none;
        }
        .toggle-label {
          margin: 0 0px 0 5px;
        }
        .show-hide-wrap {
          right: 4%;
          margin-right: 16px;
          margin-bottom: 5px;
        }
      }
      @media screen and (max-width: 479px) {
        body {
          padding: 2px;
        }
        select {
          width: 95.5%;
        }
        .heading-2 {
          margin-top: 10px;
          padding: 0;
        }
        .form {
          padding: 0;
        }
        .ctn {
          max-width: 100%;
          padding: 0 10px 0 10px;
        }
        .row-wrapper {
          flex-direction: column;
          gap: 0;
        }
      }

      .hide {
        display: none;
      }

      /* BEGIN CUSTOM CSS*/
      .toggle-container {
    margin-bottom: 20px;
    max-width: 860px;
    padding: 20px;
    padding: 1rem 0;
}

.bgcontainer {
    display: flex;
    justify-content: center;
}

.grid {
    
    color: #ffffff;
    padding: 20px;
    font-family: Arial, sans-serif;
    font-size: 1.2rem !important;
    
    height: 100%;
    min-width: 340px;
   

}

.toggle-switch {
    position: relative;
    display: inline-block;
    width: 64px;
    height: 28px;
}

.toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
}

.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #9a9b9b;
    transition: 0.4s;
    border-radius: 34px;
    
    border: 3px solid white;
}

.slider:before {
    position: absolute;
    content: "";
    height: 23px;
    width: 23px;
    top: 3px;
    left: 4px;
    bottom: 4px;
    background-color: #034c89;
    transition: 0.4s;
    border-radius: 50%;
}

input:checked + .slider {
    background-color: #00ff08;
    border: 3px solid white;
}

input:checked + .slider:before {
    transform: translateX(28px);
}

.toggle-switch {
    padding-top: 6px;
}

label {
    margin-left: 10px;
    
}

.batLabel {
  margin-left: 3px;
}

.batteryContainer {
  display: -webkit-box !important;
  display: -moz-box !important;
  display: -ms-flexbox !important;
  display: -webkit-flex !important;
  display: flex !important;
  flex-direction: row !important;
  align-items: center !important;
  padding-left: 20px;
}

.batteryBump {
  border-radius: 2px;
  background-color: #ffffff;
  margin: 1px;
  width: 3px;
  height: 12px;
}

.batteryOuter {
  border-radius: 4px;
  border: 3px solid #ffffff;
  padding: 0px;
  width: 54px;
  height: 25px;
  color: #034c89 !important;
  position: relative; /* Establish a containing block for absolute positioning */
  background-color: #9a9b9b;
}

#batteryLevel {
  border-radius: 1px;
  background-color: #00ff00;
  width: 8px;
  height: 21px;
  position: absolute;
  left: 0;
  top: 0;
  margin: 2px;
}

#percentage {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); /* Center within .batteryOuter */
  text-align: center; /* Ensure text alignment */
  pointer-events: none; /* Prevent interfering with user interactions */
  /*text-shadow: 0.5px 0.5px 0px #FFF;*/
  color: #034c89;
}
#percentage span,
#percentage #batperc {
  font-size: 0.9rem !important; /* Adjust the size here */   
}
/* END CUSTOM CSS*/      
    </style>
  </head>
  <body>
    <main id="main-box">
      <header class="ctncustom">
        <div class="title">
          <div id="img-logo" title=""></div>
          <div class="heading">
            <h1 id="name-logo">THE HAMMER</h1>
            <span id="esp-ip"></span><br />
            <span id="firmwareVersion"></span><br>
          </div>
        </div>
        <div class="topnav" id="top-nav">
          <span id="gen-link"
            ><a id="set-settings" class="a-link active" data-box="settings-box"
              >General</a
            ></span
          >
          <span id="nav-link"
            ><a id="set-wifi" class="a-link" data-box="wifi-box"
              >WiFi Setup</a
            ></span
          >
          <span id="upd-link"
            ><a id="set-update" class="a-link" data-box="update-box"
              >Update & FS</a
            ></span
          >
          <a class="a-link icon" id="hum-btn">
            <div class="svg" style="margin: -2px">
              <svg
                id="svg-menu"
                height="16pt"
                fill="currentColor"
                viewBox="0 0 20 18"
              ></svg>
            </div>
          </a>
        </div>
      </header>
      

      <div id="wifi-box" class="ctn opt-box hide">
        <h2 class="heading-2">Connect to WiFi</h2>

        <div id="wifi-table" class="hide">
          <hr />
          <table class="table">
            <tbody id="wifi-list"></tbody>
          </table>
          <br />
        </div>
        <div id="wifi">
          <div class="tf-wrapper">
            <label for="ssid" class="input-label">SSID</label>
            <input
              type="text"
              placeholder="Enter your WiFI SSID name"
              id="ssid"
            />
          </div>
          <div class="tf-wrapper">
            <label for="password" class="input-label">Password</label>
            <div class="pswd">
              <input
                type="password"
                placeholder="Enter your WiFi password"
                id="password"
                autocomplete="current-password"
                data-ms-member="password"
              />
              <span class="show-hide-wrap" id="show-hide-password">
                <a class="show-hide hide" id="show-pass">
                  <div class="svg">
                    <svg class="svg-e" id="svg-eye" viewBox="0 0 24 24"></svg>
                  </div>
                </a>
                <a class="show-hide" id="hide-pass">
                  <div class="svg">
                    <svg
                      class="svg-e"
                      id="svg-no-eye"
                      viewBox="0 0 24 24"
                    ></svg>
                  </div>
                </a>
              </span>
            </div>
          </div>
          <div class="tf-wrapper">
            <label class="input-label toggle">
              <input id="no-dhcp" type="checkbox" class="t-check" />
              <div class="toggle-switch"></div>
              <span class="toggle-label">Manual configuration (no DHCP)</span>
            </label>
          </div>
          <div class="hide" id="conf-wifi">
            <div class="tf-wrapper">
              <label for="ip" class="input-label">IP Address</label>
              <input
                type="text"
                placeholder="IP Address"
                id="ip"
                value="192.168.0.10"
              />
            </div>
            <div class="tf-wrapper">
              <label for="gateway" class="input-label">Gateway</label>
              <input
                type="text"
                placeholder="Gateway address"
                id="gateway"
                value="192.168.0.1"
              />
            </div>
            <div class="tf-wrapper">
              <label for="subnet" class="input-label">Subnet</label>
              <input
                type="text"
                placeholder="Subnet mask"
                id="subnet"
                value="255.255.255.0"
              />
            </div>
          </div>

          <div class="tf-wrapper">
            <label class="lbl-wifi toggle">
              <input id="persistent" type="checkbox" class="t-check" checked />
              <div class="toggle-switch"></div>
              <span class="toggle-label">Store WiFi credentials</span>
            </label>
          </div>
        </div>
        <hr />
        <div class="btn-bar">
          <a id="scan-wifi" class="btn">
            <div class="svg">
              <svg id="svg-scan" fill="currentColor" viewBox="0 0 24 24"></svg>
            </div>
            <span>Scan WiFi networks</span>
          </a>
          <a id="connect-wifi" class="btn">
            <div class="svg">
              <svg
                id="svg-connect"
                fill="currentColor"
                viewBox="0 0 24 24"
              ></svg>
            </div>
            <span>Connect to <span id="ssid-name">SSID</span></span>
          </a>
          <a id="save-wifi" class="btn hide">
            <div class="svg">
              <svg id="svg-save2" fill="currentColor" viewBox="0 0 24 24"></svg>
            </div>
            <span>Save configuration</span>
          </a>
        </div>
      </div>

      <!-- CUSTOM HTML-->
      
      
      <div id="settings-box" class="ctn opt-box">
        <h2 class="heading-2">General Settings</h2>
        <div class="tf-wrapper">
          <div class="grid">
          <div class="toggle-container">
            <label>
              <div class="batteryContainer">
                <div class="batteryOuter">
                  <div id="batteryLevel"></div>
                  <div id="percentage">
                    <span id="batperc"></span>
                  </div>
                </div>
                <div class="batteryBump"></div>
                <span id="batLabel" class="batLabel">Battery</span>
              </div>
            </label>
          </div>
    
          <div class="toggle-container">
            <label>
              <label class="toggle-switch">
                <input type="checkbox" id="ledToggle" />
                <span class="slider"></span>
              </label>
              <span>Light (off/ON)</span>
            </label>
          </div>
    
          <div class="toggle-container">
            <label>
              <label class="toggle-switch">
                <input type="checkbox" id="ipToggle" />
                <span class="slider"></span>
              </label>
              <span>Display IP Address (on boot)</span>
            </label>
          </div>
    
          <div class="toggle-container">
            <label>
              <label class="toggle-switch">
                <input type="checkbox" id="suckToggle" />
                <span class="slider"></span>
              </label>
              <span>Suck-Mode (off/ON)</span>
            </label>
          </div>
    
          <div class="toggle-container">
            <label>
              <label class="toggle-switch">
                <input type="checkbox" id="speedToggle" />
                <span class="slider"></span>
              </label>
              <span>Pump Speed (low/HI)</span>
            </label>
          </div>
          </div>
          <br /><br />
        </div>
      </div>
      <!-- END CUSTOM HTML-->

      <div id="update-box" class="ctn opt-box hide">
        <h2 class="heading-2">Update Device's Firmware</h2>
        <div class="tf-wrapper">
          <form
            id="update-form"
            class="form"
            action="/update"
            method="post"
            enctype="multipart/form-data"
          >
            <div class="firmware">
              <label for="file-input" id="fw-label" class="fw-upload"
                >Select firmware binary file</label
              >
              <input id="file-input" type="file" />
              <a id="update-btn" class="btn submit">
                <div class="svg">
                  <svg fill="currentColor" viewBox="0 0 24 24">
                    <path d="M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z" />
                  </svg>
                </div>
                <span>UPDATE!</span> </a
              ><br />
            </div>
            <div
              class="progress-wrap hide"
              id="progress-wrap"
              data-progress-style="fill-back"
            >
              <div id="update-log"></div>
              <div class="progress" id="progress-anim"></div>
            </div>
          </form>
        </div>

        <h2 class="heading-2">Load file to THE HAMMER's FileSystem</h2>
        <div class="tf-wrapper">
          <form
            class="form"
            action="/edit"
            method="post"
            enctype="multipart/form-data"
          >
            <ul id="listing"></ul>
            <label for="picker" id="pick-label" class="fw-upload"
              >Select the folder containing your files</label
            >
            <input
              type="file"
              id="picker"
              name="fileList"
              webkitdirectory
              multiple
            />
            <p>
              N.B.: if folder name is <b>"/data"</b>, the files will be uploaded
              at root "/" level
            </p>
          </form>
        </div>
      </div>
      <hr id="btn-hr" class="hide" />
      <div id="btn-box" class="btn-bar hide">
        <a id="restart" class="btn">
          <div class="svg">
            <svg id="svg-restart" fill="currentColor" viewBox="0 0 24 24"></svg>
          </div>
          <span>Restart Device</span>
        </a>
        <a id="save-params" class="btn">
          <div class="svg">
            <svg id="svg-save" fill="currentColor" viewBox="0 0 24 24"></svg>
          </div>
          <span>Save configuration</span>
        </a>
      </div>
    </main>

    <div class="loader hide" id="loader">
      <div class="loading">Loading...</div>
      <div class="spinH spin-1H"></div>
      <div class="spinH spin-2H"></div>
      <div class="spinH spin-3H"></div>
      <div class="spinH spin-4H"></div>
    </div>

    <details id="modal-message">
      <summary></summary>
      <div class="d-modal">
        <div class="d-modal-title"><h2 id="message-title">t</h2></div>
        <div class="d-modal-content"><p id="message-body"></p></div>
        <div class="btn-bar">
          <a id="ok-modal" class="btn hide" onclick="closeModal(true)"
            ><span>OK</span></a
          >
          <a id="close-modal" class="btn" onclick="closeModal(false)"
            ><span>Close</span></a
          >
        </div>
      </div>
    </details>
    <footer class="foot">
      <hr />
      <a id="about" target="_blank" rel="noopener"></a>
    </footer>
    <script>
      const svgLogo =
        '<svg width="148" height="140" viewBox="0 0 514 486"><path fill="#FFFFFF" stroke="#FFFFFF" d="M270.5 12q8.81.69 14 5l15 1 4 2 22 4 12 5h4l12 4 1.5 1.5-1 2.5 5.5 2 3-1 11 4 6.5 5.5 1.5 2.5h3l6 4 10 9 6 1 8.5 7.5q-.75 2.25 1.5 1.5L438 92.5l3 5.5q2.667-1.125 2 1.5l10 13.5q2.667-1.125 2 1.5l16 22 14 30 11 39v9l2 7v24q2.5 1.5 1 7l-1 1v13l-2 9v9l-6 26-6 18-2 2v3l-8 15v3.5q3-1.25 2 2.5l-3.5 4.5q-5.25-1.75-3.5 3.5l1 3-4 1.5q1.25 4.6-1.5 6-3.333-1.125-2.5 1.5l-1 4-5 7-18 21.5q-3.75-1.5-3 1.5l-1 2.5-4 2.5-1.5 2.5q-2.25-.75-1.5 1.5l-11 7-1 3.5-4.5 1-8 7-30 16-34 12-13 2-4 2-15 1-1 1h-45l-3-1h-12l-10-3h-5l-27-9-7-1-15-6-31-18-28.5-22.5-2.5-3.5-6.5-3q1.125-2.667-1.5-2-6.725-4.775-10-13l-2.5-1.5-12-14-14-24q2.75-.75 2-5l-3-8.5 4 1v2.5l5 6.5q3 1.25 2-2.5-5.3-8.2-7-20l-6.5-9.5-4.5-2.5-1-7-3.5-7.5h-4l-4.5-3-3.5-6-5.5-4.5q5.1-6.9 3-21l-1-5 1-5-6.5-8.5-3 2-.5-1.5 4-7V231l-4-2.5v-4l6-13v-3l-8-4 4-6-1-3 1-1v-12l1-1v-2l-1.5-2.5q-3-.75-1.5 3h-3l1.5-3 4.5-3.5q-.75-2.25 1.5-1.5l1.5-2.5v-2q-.6-4.6 2-6l-1.5-.5q-1.25 3.75-5.5 3l2-6.5v-2q-.875-3 3.5-1.5L61 137.5l8-13-5-2 3.5-1.5q2.25 4.25 4.5-.5l-2.5-1.5-1.5.5 3-8v-5l-1-5.5 4 1.5 1.5 2.5 7-10q3.667-3.333 12-2l9.5-8.5q-.75-2.25 1.5-1.5l20-19 4-1 10-8 19-11 30-14 19-6h4l12-4h5l4-2 18-1q3.5-4 12-3l4 2 4-4zM349 33v1-1zm2 1v1-1zm-67 34l-3 1-1 2q5-2 4 2h-11l-4 3-8 2h18q3 3 12 1l38 8 28 12 10 7q2-1 1 2l7 3 11 10 16 18 10 15 2 1-3-8-20-26-4-2-7-8 8 1 11 10 3 4 3 8 9 9 19 38 6 23q-1 7 2 11v11l2 7-1 22-1 1v8l-3 15-11 25v3l-13 21-4 2-1 3q1 4-1 3l-10 15-2 1-1-2-2 5-8 4v2q-3-1-2 2l-4 4h-2l-2 3q-7 8-17 13l-2-2 10-7q2 1 1-1l7-6v-2l-18 11-9 3-3 3-12 6-9 3-13 8-24 7-5-1q-3 1-2-1l15-8-1-2-3 1-11-1-1-1-5 1-17-1-5-2h-6l-4-2-13-2-17-6-9-5v-1l7 1 13 6 20 5 21 2 1 1h11l1-1h10l1-1 3 1 9-2h8l16-5 19-10 11-8h2l23-16 2-3 3-2 8-9 5-4 17-26 12-32 1-12 1-1v-36l-4-19v-8l-9-20-3-1 1-3-7-9q-2-10-8-15-1-3-4-2-5-2-2-3v-3l-2-4-6-3-3-3-2-2h-2l-4-2-2-3-12-10-2 1-2-2-3-4-12-6-2 1q-4 1-3-2h-5l-7-3h-5l-18-5-16-1-1-1h-26l-22 4q-26 7-44 22-3-1-2 2-10 3-16 12-3-1-2 2h-2v2h-2v2h-2v2h-2v2h-2l-22 29-14 24-4 10-2 13-3 5-2 1-9 14h4l3 6v5l3 6 1 7-6 4q1 2-1 1l-4 5 1 5 4 2q2 5-1 4l-3 4q-2-3-8-2l-7-4 1 4q2 1 0 2l-5-6v-5l-3-2-1 5 1 4 4 4-1 1-2-1-3-1v5l7 16 1 12 22 32v2l12 14 10 8 8 10 32 23 18 9h1l-41-29-5-5-6-6-21-25-8-12-1-4-5-6v-2q-2-2 1-3l2 1 7 12 2 1-2-4v-7l2-1 5 7 2 6 5 7 9 8h1l-11-16-2-4h2l9 8 2 4q2 3 3 0-1-3 2-2l3 9 11 12 11 8q2-1 1 2l5 2 4 5q-6 1-7-3-3-1-2 2l16 11 33 17 28 7 16 1 2 2h9l1-1 2 1h14l1-1 4 1 5-2h7q1-3 7-2l32-11 6-4 13-5 24-17 3-2 5-7h-1l-10 10-16 8-10 8h-3l-6 4-6 1-4 3-6 1-17 7h-10l3-3 17-3 11-4 26-13h3l30-24 1-3 3-1 2 4 5-6-2-4 7-7h2l3-4q-2-8 2-7h1q-2 5 2 4l1-2-1-2q-1-3 3-2l6-9v-5l3-3 4-9 5-19 3-6v-6q-3 0-2-4l3 1 2-7q1-3-3-2-1-3 2-2l1-4v-10l-1-1 3-7q1-7-3-9l1-2q-2-5-1-13l-2-4v-7l-2-8-11-28-12-22-21-27-28-23-3 1 7 6-1 2-6-3q-4-1-4-5 4-2 1-4l-2 3q-4 1-5-1v-4q3 1 2-2h-2l-6-4-2 1 3 1 3 6-14-7-2-3 6 2h2l-11-7-8-3-11-2-3-2h-5l-16-4-14-1zm-36 6v1l4 2h9l-13-3zm-94 68l-7 8 7-6v-2zm262 15l-1 3 10 17q-1 2 2 1-3-12-11-21zm-283 14v1-1zm-93 6v1-1zm388 4v1-1zm-1 2l6 19 4 35h1l-1-30-3-5 1-5q1-3-2-2l-4-10q1-3-2-2zm11 59l-1 3h1v-3zm-1 3v3q3-1 0-3zm0 7l-2 7q-2 5 2 4v-11zm-1 12v1-1zM73 278l2 8v-6q1-3-2-2zm7 3l-1 2h1v-2zm-4 6l-1 2h1v-2zm1 5v1-1zm6 30l-1 2h1v-2zm1 2l-1 2 5 10 8 10 3 2-2-5-13-19zm34 14l-1 2h1v-2zm1 2v1-1zm296 8l-1 3q-1 3 3 1 2-5-2-4zm-314 2l-1 2h1v-2zm-15 1v1-1zm16 1v1-1zm1 1v1-1zm1 1v1-1zm276 7v1-1zm23 2q-4 1-3 5l3-2v-3zm-240 10l1 2h1l-2-2zm5 3l-1 2h1v-2zm1 2v1h1l-1-1zm-2 15v1-1zm7 5v1h1l-1-1zm4 2v1h1l-1-1zm4 3v1-1zm4 2v1-1zm1 1v1-1zm33 12v2l3 1-1-1q1-3-2-2zm-15 2v2h3l-3-2z" opacity=".925" /><path fill="#F6F5F5" stroke="#F6F5F5" d="M299 73q3.813-1 5 1.5-1.25 2.75-2.5.5-3.75 1-2.5-2zm14 2l8.5 1 3.5 2.5q.833 2.625-2.5 1.5-3.396-3.667-9.5-3v-2zM80.5 81l2.5 1.5-4 2.5 1.5-4zM334 81q5.563-1 7 3.5l-3.5.5-3.5-2.5V81zM92.5 86v1-1zm-35 21l2.5 3.5-3 .5.5-4zm5 3l2.5 1.5 1 4.5-5-2.5 1.5-3.5zm169 9q8.167-1.667 12 1l48.5 48.5-1.5 3.5q-2.625-.667-1.5 2l3 1.5-41 40-9.5 10.5q-2.25-.75-1.5 1.5L209.5 258l-4 1-13.5-11.5-9.5-10.5q-2.25.75-1.5-1.5l-12-11-9.5-10.5q-2.25.75-1.5-1.5l-9-11 9-9V191h1.5l10.5-10.5q-.75-2.25 1.5-1.5l6.5-8q2.667 1.125 2-1.5l12-11 1.5-2.5 3.5-2.5q-.75-2.25 1.5-1.5l3.5-5q2.667 1.125 2-1.5l6-5 1.5-2.5 3.5-2.5 2.5-3.5 3-2 3-4 4.5-3.5q-.75-2.25 1.5-1.5l2-2zm-210 37v1-1zm5 3l2.5 1.5-1 2.5-4 1q-.75-3.833 2.5-5zM22 176q3-1 2 2-3 1-2-2zm9.5 38l1 2-1-2zm232 0l7.5 6.5 19.5 20.5 2.5 1.5 1.5 2.5q2.25-.75 1.5 1.5l8 6.5v1.5l10.5 10.5q2.25-.75 1.5 1.5l4 2.5v1.5l18.5 18.5q2.25-.75 1.5 1.5l4 2.5v1.5l16.5 16.5 2.5 1.5q-.75 2.25 1.5 1.5 4.85 2.15 5.5 8.5L351.5 340l-3.5-2-7.5-9-3-2-1.5-3q-2.667 1.125-2-1.5l-88-89 5-8.5 7-5.5 2.5-3.5 3-2zm-234 11l.5 5.5-2-1q-.75-3.75 1.5-4.5zm419 2l.5 1.5h-1l.5-1.5zM123 230q3-1 2 2-3 1-2-2zm-7.5 4v1-1zm-1 3l3 2 3.5-2 1 3.5-8 6.5-1-3.5v-4l1.5-2.5zm18 1q2.25-.75 1.5 1.5l-1.5-1.5zm-15 11l.5 1.5h-1l.5-1.5zm329 30l-.5 1.5q.75 3.75-1.5 4.5l-.5-1.5 2.5-4.5zm-347 13v1-1zm-7 1l3.5 3.5 1 7h-1L92.5 293zm11 7l3.5 2.5q.75 2.25-1.5 1.5l-2-4zm334.5 2q3-1 2 2-3 1-2-2zm-329.5 4q3.125 1.375 2.5 6.5h-1l-3-5 1.5-1.5zm-6 13l1 2-1-2zm12.5 0l4 2.5 4 8-3-2-5-8.5zm28.5 11q4.5 2 1 4l-2.5-1.5 1.5-2.5zm283 0v1-1zm-280 4q4.75.25 6.5 3.5l1.5 2.5 13.5 10q-1.125 2.667 1.5 2l30.5 22.5-2.5.5-22-13-18.5-16.5q.75-2.25-1.5-1.5l-8.5-6-.5-4zm258 23l-1 2 1-2zM182 385h3.5l6.5 3.5-2.5.5-7.5-2v-2zm34.5 16l12 2 6.5 3.5-3.5.5q-4.042-2.958-11-3l-4-2v-1zm22 6v1-1zm1.5 0l7.5 2 22 1 1.5 1.5q-1 2.5-5.5 1.5-7.167-3.333-19-2l-6.5-2v-2zm39.5 3q2.625-.667 1.5 2l-3-.5 1.5-1.5zm4.5 0h7.5l1.5 1.5-9 .5v-2zm13.5 1v1-1zm-19 5l1.5.5-1.5.5v-1zm6 0l1 2q-2.792.667-1-2z" opacity=".925" /></svg>'
      const svgLock =
        '<svg height="16pt" viewBox="0 0 24 24"><path d="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z" /></svg>'
      const svgUnlock =
        '<svg height="16pt" viewBox="0 0 24 24"><path d="M18 1C15.24 1 13 3.24 13 6V8H4C2.9 8 2 8.89 2 10V20C2 21.11 2.9 22 4 22H16C17.11 22 18 21.11 18 20V10C18 8.9 17.11 8 16 8H15V6C15 4.34 16.34 3 18 3C19.66 3 21 4.34 21 6V8H23V6C23 3.24 20.76 1 18 1M10 13C11.1 13 12 13.89 12 15C12 16.11 11.11 17 10 17C8.9 17 8 16.11 8 15C8 13.9 8.9 13 10 13Z" /></svg>'
      const svgScan =
        '<path d="M12 20L8.4 15.2C9.4 14.45 10.65 14 12 14S14.6 14.45 15.6 15.2L12 20M4.8 10.4L6.6 12.8C8.1 11.67 9.97 11 12 11S15.9 11.67 17.4 12.8L19.2 10.4C17.19 8.89 14.7 8 12 8S6.81 8.89 4.8 10.4M12 2C7.95 2 4.21 3.34 1.2 5.6L3 8C5.5 6.12 8.62 5 12 5S18.5 6.12 21 8L22.8 5.6C19.79 3.34 16.05 2 12 2M7 24H9V22H7V24M15 24H17V22H15V24M11 24H13V22H11V24Z" />'
      const svgConnect =
        '<path d="M12,21L15.6,16.2C14.6,15.45 13.35,15 12,15C10.65,15 9.4,15.45 8.4,16.2L12,21M12,3C7.95,3 4.21,4.34 1.2,6.6L3,9C5.5,7.12 8.62,6 12,6C15.38,6 18.5,7.12 21,9L22.8,6.6C19.79,4.34 16.05,3 12,3M12,9C9.3,9 6.81,9.89 4.8,11.4L6.6,13.8C8.1,12.67 9.97,12 12,12C14.03,12 15.9,12.67 17.4,13.8L19.2,11.4C17.19,9.89 14.7,9 12,9Z" />'
      const svgSave =
        '<path d="M15,9H5V5H15M12,19A3,3 0 0,1 9,16A3,3 0 0,1 12,13A3,3 0 0,1 15,16A3,3 0 0,1 12,19M17,3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V7L17,3Z" />'
      const svgRestart =
        '<path d="M12,4C14.1,4 16.1,4.8 17.6,6.3C20.7,9.4 20.7,14.5 17.6,17.6C15.8,19.5 13.3,20.2 10.9,19.9L11.4,17.9C13.1,18.1 14.9,17.5 16.2,16.2C18.5,13.9 18.5,10.1 16.2,7.7C15.1,6.6 13.5,6 12,6V10.6L7,5.6L12,0.6V4M6.3,17.6C3.7,15 3.3,11 5.1,7.9L6.6,9.4C5.5,11.6 5.9,14.4 7.8,16.2C8.3,16.7 8.9,17.1 9.6,17.4L9,19.4C8,19 7.1,18.4 6.3,17.6Z" />'
      const svgEye =
        '<path d="M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9M12,4.5C17,4.5 21.27,7.61 23,12C21.27,16.39 17,19.5 12,19.5C7,19.5 2.73,16.39 1,12C2.73,7.61 7,4.5 12,4.5M3.18,12C4.83,15.36 8.24,17.5 12,17.5C15.76,17.5 19.17,15.36 20.82,12C19.17,8.64 15.76,6.5 12,6.5C8.24,6.5 4.83,8.64 3.18,12Z" />'
      const svgNoEye =
        '<path d="M0 0h24v24H0V0z" fill="none"/><path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>'
      const svgMenu =
        '<path d="M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z"/>'

      var closeCb = function () {}
      var port =
        location.port || (window.location.protocol === 'https:' ? '443' : '80')
      var esp = `${window.location.protocol}//${window.location.hostname}:${port}/`
      var options = {}
      var configFile
      var lastBox

      // Element selector shorthands
      var $ = function (el) {
        return document.getElementById(el)
      }

      function hide(id) {
        $(id).classList.add('hide')
      }

      function show(id) {
        $(id).classList.remove('hide')
      }

      function newEl(element, attribute) {
        var el = document.createElement(element)
        if (typeof attribute === 'object') {
          for (var key in attribute) {
            el.setAttribute(key, attribute[key])
          }
        }
        return el
      }

      function getParameters() {
        var logo
        show('loader')
        // Fetch actual status and config info
        fetch(esp + 'getStatus')
          .then(res => res.json())
          .then(data => {
            //$('esp-mode').innerHTML = data.mode
            $('esp-ip').innerHTML = `<a href="${esp}">${esp}</a>`
            //$('firmware').innerHTML = data.firmware
            $('about').innerHTML = 'THE HAMMER - by Mano Biletsky '
            $('about').setAttribute('href', "https://github.com/mano1979/the_hammer")
            configFile = data.path

            // Fetch 'config.json'
            fetch(esp + configFile)
              .then(response => response.json())
              .then(data => {
                for (const key in data) {
                  if (data.hasOwnProperty(key)) {
                    if (key === 'name-logo') {
                      $('name-logo').innerHTML = data[key].replace(
                        /(<([^>]+)>)/gi,
                        ''
                      )
                      document.title = data[key].replace(/(<([^>]+)>)/gi, '')
                      delete data[key]
                      continue
                    }
                    if (key == 'img-logo') {
                      logo = data[key]
                      delete data[key]
                      continue
                    }
                  }
                }

                // Custom logo (base 64)
                if (logo) {
                  fetch(logo)
                    .then(response => response.text())
                    .then(base64 => setLogoBase64(logo, base64))
                }

                options = data
                createOptionsBox(options)
                hide('loader')
              })
          })
      }

      function setLogoBase64(s, base64) {
        var size = s.replace(/[^\d_]/g, '').split('_')
        var img = newEl('img', {
          class: 'logo',
          src: 'data:image/png;base64, ' + base64,
          style: `width:${size[0]}px;height:${size[1]}px`
        })
        $('img-logo').innerHTML = ''
        $('img-logo').append(img)
        $('img-logo').setAttribute('type', 'number')
        $('img-logo').setAttribute('title', '')
      }

      function addOptionsElement(opt) {
        const bools = Object.keys(opt)
          .filter(key => typeof opt[key] === 'boolean')
          .reduce((obj, key) => {
            obj[key] = opt[key]
            return obj
          }, {})

        if (Object.entries(bools).length !== 0) {
          var d = newEl('div', { class: 'row-wrapper' })
          Object.entries(bools).forEach(([key, value]) => {
            let lbl = newEl('label', { class: 'input-label toggle' })
            let el = newEl('input', {
              class: 't-check opt-input',
              type: 'checkbox',
              id: key
            })
            el.checked = value
            let dv = newEl('div', { class: 'toggle-switch' })
            let sp = newEl('span', { class: 'toggle-label' })
            sp.textContent = key
            lbl.appendChild(el)
            lbl.appendChild(dv)
            lbl.appendChild(sp)
            addInputListener(el)
            d.appendChild(lbl)
          })
          lastBox.appendChild(d)
        }

        const others = Object.keys(opt)
          .filter(key => typeof opt[key] !== 'boolean')
          .reduce((obj, key) => {
            obj[key] = opt[key]
            return obj
          }, {})

        Object.entries(others).forEach(([key, value]) => {
          let lbl = newEl('label', { class: 'input-label', 'label-for': key })
          lbl.textContent = key
          let el = newEl('input', { class: 'opt-input', type: 'text', id: key })
          el.value = value

          if (typeof value === 'number') el.setAttribute('type', 'number')
          if (typeof value === 'object') {
            // This is a select/option
            if (value.values) {
              el = newEl('select', { id: key })
              value.values.forEach(a => {
                var opt = newEl('option')
                opt.textContent = a
                opt.value = a
                el.appendChild(opt)
              })
              el.value = value.selected
              lastBox.appendChild(el)
            }
            // This is a float value
            else {
              var num =
                Math.round(value.value * (1 / value.step)) / (1 / value.step)
              el.setAttribute('type', 'number')
              el.setAttribute('step', value.step)
              el.setAttribute('min', value.min)
              el.setAttribute('max', value.max)
              el.value = Number(num).toFixed(3)
            }
          }
          addInputListener(el)
          var d = newEl('div', { class: 'tf-wrapper' })
          d.appendChild(lbl)
          d.appendChild(el)
          lastBox.appendChild(d)

          if (key.endsWith('-hidden')) {
            d.classList.add('hide')
          }
        })
      }

      function createNewBox(cont, lbl) {
        var box = newEl('div', {
          class: 'ctn opt-box hide',
          id: 'option-box' + cont
        })
        var h = newEl('h2', { class: 'heading-2' })
        h.innerHTML = lbl
        box.appendChild(h)
        $('main-box').appendChild(box)

        // Add new voice in menu and relatvie listener
        var lnk = newEl('a', {
          class: 'a-link',
          id: 'set-opt' + cont,
          'data-box': 'option-box' + cont
        })
        lnk.innerHTML = lbl
        lnk.addEventListener('click', switchPage)
        $('nav-link').appendChild(lnk)
        return box
      }

      async function createOptionsBox(raw) {
        var nest = {}
        var boxId = 'wifi-box'
        lastBox = $(boxId)

        Object.entries(raw).forEach(([key, value], index) => {
          if (boxId === 'wifi-box') {
            $('no-dhcp').checked = raw.dhcp
            $('ip').value = raw.ip_address
            $('gateway').value = raw.gateway
            $('subnet').value = raw.subnet
            if ($('no-dhcp').checked) {
              show('conf-wifi')
              show('save-wifi')
            }
          }

          if (key.startsWith('param-box')) {
            addOptionsElement(nest)
            lastBox = createNewBox(index, value)
            nest = {}
            boxId = value
          } else if (boxId != 'wifi-box') {
            var hidden = false
            if (key.startsWith('img-logo') || key.startsWith('name-logo')) {
              hidden = true
            } else if (key.startsWith('raw-css')) {
              var css = newEl('link', { rel: 'stylesheet', href: value })
              document.head.appendChild(css)
              hidden = true
            }
            // Inject runtime JS source file
            else if (key.startsWith('raw-javascript')) {
              var js = newEl('script', { src: value })
              document.body.appendChild(js)
              hidden = true
            }
            // Inject runtime HTML source file
            else if (key.startsWith('raw-html')) {
              var el = newEl('div', {
                class: 'tf-wrapper raw-html',
                id: value,
                'data-box': lastBox.id
              })
              lastBox.appendChild(el)
              fetch(value)
                .then(res => res.text())
                .then(data => ($(value).innerHTML = data))
              hidden = true
            }
            if (!hidden) {
              nest[key] = value
            }
          }
        })

        // Add last items
        if (Object.entries(nest).length !== 0) {
          addOptionsElement(nest)
        }
      }

      function addInputListener(item) {
        // Add event listener to option inputs
        if (item.type === 'number') {
          item.addEventListener('change', () => {
            if (item.getAttribute('step')) {
              var obj = {}
              obj.value =
                Math.round(item.value * (1 / item.step)) / (1 / item.step)
              obj.step = item.getAttribute('step')
              obj.min = item.getAttribute('min')
              obj.max = item.getAttribute('max')
              options[item.id] = obj
            } else options[item.id] = parseInt(item.value)
          })
          return
        }

        if (item.type === 'text') {
          item.addEventListener('change', () => {
            options[item.id] = item.value
          })
          return
        }

        if (item.type === 'checkbox') {
          item.addEventListener('change', () => {
            options[item.id] = item.checked
          })
          return
        }

        if (item.type === 'select-one') {
          item.addEventListener('change', e => {
            options[e.target.id].selected = e.target.value
          })
          return
        }
      }

      function insertKey(key, value, obj, pos) {
        return Object.keys(obj).reduce((ac, a, i) => {
          if (i === pos) ac[key] = value
          ac[a] = obj[a]
          return ac
        }, {})
      }

      function saveParameters() {
        // Backward compatibility
        if (Object.keys(options)[0].startsWith('param-box')) {
          if (Object.keys(options)[0] === 'param-box0') {
            options['param-box-0'] = options['wifi-box']
            options = { dhcp: false, ...options }
          } else options = { 'wifi-box': '', dhcp: false, ...options }
        }

        options.dhcp = $('no-dhcp').checked
        if ($('no-dhcp').checked) {
          options = insertKey('ip_address', $('ip').value, options, 2)
          options = insertKey('gateway', $('gateway').value, options, 3)
          options = insertKey('subnet', $('subnet').value, options, 4)
          options['ip_address'] = $('ip').value
          options['gateway'] = $('gateway').value
          options['subnet'] = $('subnet').value
        }

        var myblob = new Blob([JSON.stringify(options, null, 2)], {
          type: 'application/json'
        })
        var formData = new FormData()
        formData.append('data', myblob, '/' + configFile)

        // POST data using the Fetch API
        fetch('/edit', {
          method: 'POST',
          body: formData
        })
          // Handle the server response
          .then(response => response.text())
          .then(text => {
            openModal(
              'Save options',
              '<br><b>"/' +
                configFile +
                '"</b> saved successfully on flash memory!<br><br>'
            )
          })
      }

      function showHidePassword() {
        var inp = $('password')
        if (inp.type === 'password') {
          inp.type = 'text'
          show('show-pass')
          hide('hide-pass')
        } else {
          inp.type = 'password'
          hide('show-pass')
          show('hide-pass')
        }
      }

      function getWiFiList() {
        show('loader')
        fetch(esp + 'scan')
          .then(response => response.json())
          .then(data => {
            listWifi(data)
            hide('loader')
          })
      }

      function selectWifi(row) {
        try {
          $('select-' + row.target.parentNode.id).checked = true
        } catch (err) {
          $(row.target.id).checked = true
        }
        $('ssid').value = this.cells[1].innerHTML
        $('ssid-name').innerHTML = this.cells[1].innerHTML
        $('password').focus()
      }

      function listWifi(obj) {
        if (obj.hasOwnProperty('reload')) setTimeout(getWiFiList, 2000)

        obj.sort((a, b) => {
          return b.strength - a.strength
        })

        const list = document.querySelector('#wifi-list')
        list.innerHTML = ''
        obj.forEach((net, i) => {
          // Create a single row with all columns
          var row = newEl('tr')
          var id = 'wifi-' + i
          row.id = id
          row.addEventListener('click', selectWifi)
          row.innerHTML = `<td><input type="radio" name="select" id="select-${id}"></td>`
          row.innerHTML += `<td id="ssid-${id}">${net.ssid}</td>`
          row.innerHTML += '<td class="hide-tiny">' + net.strength + ' dBm</td>'
          row.innerHTML += net.security
            ? '<td>' + svgLock + '</td>'
            : '<td>' + svgUnlock + '</td>'
          // Add row to list
          list.appendChild(row)
        })
        show('wifi-table')
      }

      function doConnection(e, f) {
        if ($('ssid').value === '' || $('password').value === '') {
          openModal('Connect to WiFi', 'Please insert a SSID and a Password')
          return
        }
        var formdata = new FormData()
        formdata.append('ssid', $('ssid').value)
        formdata.append('password', $('password').value)
        formdata.append('persistent', $('persistent').checked)
        if (typeof f !== 'undefined') formdata.append('newSSID', true)
        if ($('no-dhcp').checked) {
          formdata.append('ip_address', $('ip').value)
          formdata.append('gateway', $('gateway').value)
          formdata.append('subnet', $('subnet').value)
        }
        var requestOptions = {
          method: 'POST',
          body: formdata,
          redirect: 'follow'
        }

        show('loader')
        var s
        fetch('/connect', requestOptions)
          .then(function (res) {
            s = res.status
            return res.text()
          })
          .then(function (data) {
            if (s === 200) {
              if (data.includes('already'))
                openModal('Connect to WiFi', data, () => {
                  doConnection(e, true)
                })
              else openModal('Connect to WiFi', data, restartESP)
            } else openModal('Error!', data)

            hide('loader')
          })
          .catch(error => {
            openModal('Connect to WiFi', error)
            hide('loader')
          })
      }

      function switchPage(el) {
        $('top-nav').classList.remove('responsive')
        // Menu items
        document.querySelectorAll('a').forEach(item => {
          item.classList.remove('active')
        })
        el.target.classList.add('active')

        // Box items
        document.querySelectorAll('.opt-box').forEach(e => {
          e.classList.add('hide')
        })
        show(el.target.getAttribute('data-box'))

        if (el.target.id != 'set-wifi' && el.target.id != 'set-settings') {
          var fragment = document.createDocumentFragment()
          fragment.appendChild($('btn-hr'))
          fragment.appendChild($('btn-box'))
          const box = $(el.target.getAttribute('data-box'))
          box.appendChild(fragment)

          document.querySelectorAll('.raw-html').forEach(function (el) {
            if (el.getAttribute('data-box') === box.id)
              box.insertBefore(el, $('btn-hr'))
          })

          show('btn-box')
          show('btn-hr')
        } else {
          hide('btn-box')
          hide('btn-hr')
        }
      }

      function showMenu() {
        $('top-nav').classList.add('responsive')
      }

      function openModal(title, msg, fn, args) {
        $('message-title').innerHTML = title
        $('message-body').innerHTML = msg
        $('modal-message').open = true
        $('main-box').style.filter = 'blur(3px)'
        if (typeof fn != 'undefined') {
          closeCb = fn
          show('ok-modal')
        } else hide('ok-modal')
      }

      function closeModal(do_cb) {
        $('modal-message').open = false
        $('main-box').style.filter = ''
        if (typeof closeCb != 'undefined' && do_cb) closeCb()
      }

      function restartESP() {
        fetch(esp + 'reset')
          .then(response => response.text())
          .then(data => {
            closeModal()
            openModal('Restart!', '<br>Device restarted!')
          })
      }

      function handleSubmit() {
        let fileElement = $('file-input')
        // check if user had selected a file
        if (fileElement.files.length === 0) {
          alert('please choose a file')
          return
        }
        var update = $('update-log')
        var loader = $('loader')
        var prg = $('progress-wrap')
        show('loader')
        show('progress-wrap')
        $('progress-wrap').classList.add('active')
        update.innerHTML = 'Update in progress'

        let formData = new FormData()
        formData.set('update', fileElement.files[0])
        var req = new XMLHttpRequest()
        req.open('POST', '/update?size=' + fileElement.files[0].size)
        req.onload = function (d) {
          hide('loader')
          $('progress-wrap').classList.remove('active')
          update.innerHTML =
            req.status != 200
              ? `Error ${req.status}: ${req.statusText}`
              : req.response
        }
        req.upload.addEventListener('progress', p => {
          let w = Math.round((p.loaded / p.total) * 100) + '%'
          if (p.lengthComputable) {
            $('progress-anim').style.width = w
            update.innerHTML = 'Update in progress: ' + w
          }
        })
        req.send(formData)
      }

      async function uploadFolder(e) {
        let list = $('listing')
        for (let file of Array.from(e.target.files)) {
          let path = file.webkitRelativePath
          let item = newEl('li')
          item.textContent = path
          list.appendChild(item)
          // Save each file in the ESP flash
          var reader = new FileReader()
          reader.onload = function (event) {
            // Remove default "data" from path
            if (path.startsWith('data/')) path = path.replace('data/', '')
            var formData = new FormData()
            formData.set('data', file, '/' + path)
            // POST data using the Fetch API
            fetch('/edit', { method: 'POST', body: formData }).then(response =>
              response.text()
            )
          }
          reader.readAsText(file)
        }
      }

      // Initializes the app.
      $('svg-menu').innerHTML = svgMenu
      $('svg-eye').innerHTML = svgEye
      $('svg-no-eye').innerHTML = svgNoEye
      $('svg-scan').innerHTML = svgScan
      $('svg-connect').innerHTML = svgConnect
      $('svg-save').innerHTML = svgSave
      $('svg-save2').innerHTML = svgSave
      $('svg-restart').innerHTML = svgRestart
      $('img-logo').innerHTML = svgLogo

      $('hum-btn').addEventListener('click', showMenu)
      $('scan-wifi').addEventListener('click', getWiFiList)
      $('connect-wifi').addEventListener('click', doConnection)
      $('save-params').addEventListener('click', saveParameters)
      $('save-wifi').addEventListener('click', saveParameters)
      $('show-hide-password').addEventListener('click', showHidePassword)
      $('set-settings').addEventListener('click', switchPage)
      $('set-wifi').addEventListener('click', switchPage)
      $('set-update').addEventListener('click', switchPage)
      $('about').addEventListener('click', switchPage)
      $('restart').addEventListener('click', restartESP)
      $('picker').addEventListener('change', uploadFolder)
      $('update-btn').addEventListener('click', handleSubmit)
      $('file-input').addEventListener('change', () => {
        $('fw-label').innerHTML =
          $('file-input').files.item(0).name +
          ' (' +
          $('file-input').files.item(0).size +
          ' bytes)'
        $('fw-label').style.background = 'red'
      })

      $('no-dhcp').addEventListener('change', function () {
        if (this.checked) {
          show('conf-wifi')
          show('save-wifi')
        } else {
          hide('conf-wifi')
        }
      })

      window.addEventListener('load', getParameters); //ToDo: Uncomment before deployment

      // BEGIN CUSTOM JAVASCRIPT

// Fetch the toggle states from the server
async function fetchToggleStates() {
        try {
          const response = await fetch('/read') // Replace <ESP_IP> with your ESP32's IP address
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`)
          }
          const toggleStates = await response.json()
          updateToggleSwitches(toggleStates)
        } catch (error) {
          console.error('Error fetching toggle states:', error)
        }
      }

      // Update the toggle switches based on the fetched data
      function updateToggleSwitches(toggleStates) {
        Object.keys(toggleStates).forEach(id => {
          const toggle = document.getElementById(id)
          if (toggle) {
            toggle.checked = toggleStates[id] === 'on'
          }
        })
      }

      // Send updates to the server when toggle switches are changed
      document.querySelectorAll('.toggle-switch input').forEach(toggle => {
        toggle.addEventListener('change', event => {
          const switchId = event.target.id
          const status = event.target.checked ? 'on' : 'off'

          fetch(`/?id=${switchId}&status=${status}`) // Replace <ESP_IP> with your ESP32's IP address
            .then(response => {
              if (response.ok) {
                console.log(`Successfully updated ${switchId} to ${status}`)
              } else {
                console.error(`Failed to update ${switchId}`)
              }
            })
            .catch(error => console.error('Error:', error))
        })
      })

      setInterval(function () {
        // Call a function repetatively with 30 Second interval
        getData()
      }, 30000) //30Seconds update rate //ToDo

      function getData() {
        var xhttp = new XMLHttpRequest()
        xhttp.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            document.getElementById('batperc').innerHTML =
              this.responseText + '%'
            batVal = parseInt(this.responseText) / 2
            console.log(batVal)
            if (batVal < 5) {
              document.getElementById('batteryLevel').style.setProperty('background-color', '#ff0000')
              document.getElementById('batLabel').innerHTML = "Charge Battery!"
            } else if(batVal > 45) {
              document.getElementById('batLabel').innerHTML = "Battery Full"
            }else{
              document.getElementById('batteryLevel').style.setProperty('background-color', '#00ff00')
              document.getElementById('batLabel').innerHTML = "Battery"
            }
            document.getElementById('batteryLevel').style.setProperty('width', batVal + 'px')
            
          }
        }
        xhttp.open('GET', '/readADC', true)
        xhttp.send()
      }

      function getFirmwareVersion() {
        var xhttp = new XMLHttpRequest()
        xhttp.onreadystatechange = function () {
          if (this.readyState == 4 && this.status == 200) {
            document.getElementById('firmwareVersion').innerHTML =
              'Firmware: ' + this.responseText
          }
        }
        xhttp.open('GET', '/fwv', true)
        xhttp.send()
      }
      document.addEventListener('DOMContentLoaded', getData()) // battery update on page load
      document.addEventListener('DOMContentLoaded', fetchToggleStates()) //get toggle states //ToDo
      document.addEventListener('DOMContentLoaded', getFirmwareVersion()) //get firmware version
      //END CUSTOM JAVASCRIPT
    </script>
  </body>
</html>
